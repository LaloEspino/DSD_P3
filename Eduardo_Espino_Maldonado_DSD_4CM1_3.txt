//
//  main.cpp
//  
//
//  Created by Lalo Espino on 08/04/18.
//
//  Para compilar el archivo escriba el siguiente comando en terminal:
//  gcc main.cpp gfx.c -o main -I/usr/X11R6/include -L/usr/X11R6/lib -lX11 -lm
//
//  Para ejecutar el programa escriba lo siguiente en terminal:
//  (n es el número de barras que van a aparecer y m el límite superior que tendrán)
//  ./main n m
//
//  Cuando la ventana de XQuartz esté abierta presione la tecla 'q' para salir
//
//  p.e. ./main 50 30
//

#include "gfx.h"
#include <iostream>
#include <stdio.h>      /* printf, NULL */
#include <stdlib.h>     /* srand, rand */
#include <time.h>       /* time */
#include <math.h>       /* sqrt */

using namespace std;

// *******************************************************************************************

/*  Interfaz Barra  */

class Barra {
    int x1;
    int y1;
    int x2;
    int y2;
    
public:
    void graficarBarra();
    void setX1(int x);
    void setY1(int y);
    void setX2(int x);
    void setY2(int y);
    int getX1();
    int getY1();
    int getX2();
    int getY2();
};

// *******************************************************************************************

/*  Clase Barra  */

/*  Dibuja la linea correspondiente con los parametros establecidos  */

void Barra::graficarBarra() {
    gfx_line(x1, y1, x2, y2);
}

/*  Setters  */

void Barra::setX1(int x) {
    x1 = x;
}

void Barra::setY1(int y) {
    y1 = y;
}

void Barra::setX2(int x) {
    x2 = x;
}

void Barra::setY2(int y) {
    y2 = y;
}

/*  Getters  */

int Barra::getX1() {
    return x1;
}

int Barra::getY1() {
    return y1;
}

int Barra::getX2() {
    return x2;
}

int Barra::getY2() {
    return y2;
}

// *******************************************************************************************

/*  Genera los números aleatorios  */

void generarAleatorio(int MEDIA, int VARIANZA, int BARRAS_DESEADAS, int altoBarra[]);

/*  Programa principal  */

int main (int argc, char* argv[]) {
    
    /*  Variables de gfx  */
    const int GFX_WIDTH         = 1000;
    const int GFX_HEIGHT        = 500;
    const char GFX_TITLE[]      = "Proyecto 3 DSD";
    
    /*  Variables de negocio  */
    const int BARRAS_DESEADAS   = atoi(argv[1]);
    const int LIMITE_SUPERIOR   = atoi(argv[2]);
    
    /*  Variables de longitud  */
//    const int AUX_ANCHO_BARRA   = 50;
//    const int ESPACIO_BARRA     = 20;
//    const int ANCHO_BARRA       = (50 + 20);
//    const int ALTO_BARRA        = 100;

    const int AUX_ANCHO_BARRA   = 10;
    const int ESPACIO_BARRA     = AUX_ANCHO_BARRA / 2;
    const int ANCHO_BARRA       = AUX_ANCHO_BARRA + ESPACIO_BARRA;
    const int ALTO_BARRA        = AUX_ANCHO_BARRA * 2;
    
    const int MEDIA             = LIMITE_SUPERIOR;
    const int VARIANZA          = MEDIA / 3;

    Barra barras[BARRAS_DESEADAS];
    
    int altoBarra[BARRAS_DESEADAS];
    generarAleatorio(MEDIA, VARIANZA, BARRAS_DESEADAS, altoBarra);

    printf("\n\tBarras: %d\n\tLímite superior: %d\n\n", BARRAS_DESEADAS, LIMITE_SUPERIOR);

    /*  Creación de ventana de gfx y asignación de colores a lineas  */
    gfx_open(GFX_WIDTH, GFX_HEIGHT, GFX_TITLE);
    gfx_color(0, 200, 100);
    
    char exit; /*  Variable para fin de ejecución de programa  */
    
    srand (time(NULL)); /*  Random seed  */

    for (int j = 0; j < BARRAS_DESEADAS; j ++) { /*  Se ejecuta por el número deseado de barras  */

//        altoBarra[j] = generarAleatorio(LIMITE_SUPERIOR);

        for (int i = 0; i < 3; i ++) { /*  Genera las lineas de una barra  */
            
            switch (i) {
                case 0: /*  Para crear primera linea  */
                    
                    barras[j].setX1(ANCHO_BARRA * j);
                    barras[j].setY1(GFX_HEIGHT);
                    
                    barras[j].setX2(ANCHO_BARRA * j);
                    barras[j].setY2(GFX_HEIGHT - (ALTO_BARRA * altoBarra[j]));

                    break;
                case 1: /*  Para crear linea interseptora */
                    
                    barras[j].setX1(ANCHO_BARRA * j);
                    barras[j].setY1(barras[j].getY2());
                    
                    barras[j].setX2(ANCHO_BARRA * j + AUX_ANCHO_BARRA);
                    barras[j].setY2(GFX_HEIGHT - (ALTO_BARRA * altoBarra[j]));

                    break;
                case 2: /*  Para crear segunda linea  */
                    
                    barras[j].setX1(ANCHO_BARRA * j + AUX_ANCHO_BARRA);
                    barras[j].setY1(barras[j].getY2());

                    barras[j].setX2(ANCHO_BARRA * j + AUX_ANCHO_BARRA);
                    barras[j].setY2(GFX_HEIGHT);

                    break;
                default:
                    break;
            }

            barras[j].graficarBarra();
            
        }
    }
    
    /*  Mientras no se escriba por teclado una letra 'q' se ejecuta el programa  */

    while (1) {
        exit = gfx_wait();
        
        if (exit == 'q') {
            break;
        }
    }
    
    return 0;
}

/*  Función que genera los números aleatorios con forme a la distribución normal utilizando el algritmo de TLC  */

void generarAleatorio(int MEDIA, int VARIANZA, int BARRAS_DESEADAS, int altoBarra[]) {
    float aux, num;
    float desv = sqrt(VARIANZA);
    int i, k;
    
    int valores[BARRAS_DESEADAS];
    
    /*  Genera los número aleatorios y alimenta un arreglo  */
    
    for (i = 1; i <= BARRAS_DESEADAS; i ++) {
        aux = 0;
        
        for (k = 1 ; k <= 1000; k ++) {
            aux = aux + (float)rand() / RAND_MAX;
        }
        
        num = desv * sqrt((float)12 / 1000) * (aux - (float)1000 / 2) + MEDIA;
        
        valores[i - 1] = num;
//        printf("%d ", (int)num);
    }
    
//    printf("\n");
    
    /*  Llena de 0's el arreglo para eliminar basura  */
    
    for (int k = 0; k < BARRAS_DESEADAS; k ++) {
        altoBarra[k] = 0;
    }

    /*  Cuenta las veces que se repite un número para generar el histograma  */
    
    for (int k = 0; k < BARRAS_DESEADAS; k ++) {
        for (int l = 0; l < BARRAS_DESEADAS; l ++) {
            if (valores[l] == k) {
                altoBarra[k] ++;
            }
        }
    }
    
//    for (int j = 0; j < BARRAS_DESEADAS; j ++) {
//        printf("%d ", altoBarra[j]);
//    }

}

// ___________________________________________________________________________________________

/*  Archivo makefile  */

/*
 
main: main.cpp gfx.c
    gcc main.cpp gfx.c -o main -I/usr/X11R6/include -L/usr/X11R6/lib -lX11 -lm
 
 */
